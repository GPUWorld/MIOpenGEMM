# Configure the tinygemm package to be used in another cmake project.
#
# Defines the following variables:
#
#  tinygemm_INCLUDE_DIRS - include directories for tinygemm
#
# Also defines the library variables below as normal
# variables.  These contain debug/optimized keywords when
# a debugging library is found.
#
# Accepts the following variables as input:
#
#-----------------------
# Example Usage:
#
# find_package( tinygemm REQUIRED CONFIG )
#
#    add_executable( foo foo.cc )
#    
#    # uses imported targets from package, including setting header paths
#    target_link_libraries( foo tinygemm )
#
#-----------------------

@PACKAGE_INIT@

include(CMakeFindDependencyMacro OPTIONAL RESULT_VARIABLE _CMakeFindDependencyMacro_FOUND)
if (NOT _CMakeFindDependencyMacro_FOUND)
  macro(find_dependency dep)
    if (NOT ${dep}_FOUND)
      set(cmake_fd_version)
      if (${ARGC} GREATER 1)
        set(cmake_fd_version ${ARGV1})
      endif()
      set(cmake_fd_exact_arg)
      if(${CMAKE_FIND_PACKAGE_NAME}_FIND_VERSION_EXACT)
        set(cmake_fd_exact_arg EXACT)
      endif()
      set(cmake_fd_quiet_arg)
      if(${CMAKE_FIND_PACKAGE_NAME}_FIND_QUIETLY)
        set(cmake_fd_quiet_arg QUIET)
      endif()
      set(cmake_fd_required_arg)
      if(${CMAKE_FIND_PACKAGE_NAME}_FIND_REQUIRED)
        set(cmake_fd_required_arg REQUIRED)
      endif()
      find_package(${dep} ${cmake_fd_version}
          ${cmake_fd_exact_arg}
          ${cmake_fd_quiet_arg}
          ${cmake_fd_required_arg}
      )
      string(TOUPPER ${dep} cmake_dep_upper)
      if (NOT ${dep}_FOUND AND NOT ${cmake_dep_upper}_FOUND)
        set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE "${CMAKE_FIND_PACKAGE_NAME} could not be found because dependency ${dep} could not be found.")
        set(${CMAKE_FIND_PACKAGE_NAME}_FOUND False)
        return()
      endif()
      set(cmake_fd_version)
      set(cmake_fd_required_arg)
      set(cmake_fd_quiet_arg)
      set(cmake_fd_exact_arg)
    endif()
  endmacro()
endif()

find_dependency(OpenCL)

set_and_check( tinygemm_INCLUDE_DIR "@PACKAGE_INCLUDE_INSTALL_DIR@" )
set_and_check( tinygemm_INCLUDE_DIRS "${tinygemm_INCLUDE_DIR}" )
set_and_check( tinygemm_LIB_INSTALL_DIR "@PACKAGE_LIB_INSTALL_DIR@" )

include( "@PACKAGE_CONFIG_PACKAGE_INSTALL_DIR@/tinygemm-targets.cmake" )

set( tinygemm_LIBRARY tinygemm)
set( tinygemm_LIBRARIES tinygemm)
